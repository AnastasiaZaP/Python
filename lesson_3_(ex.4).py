def my_func(x, y):
    # Легкий способ
    # print(f"Легкий способ решения - возведем X в степень Y с помошью оператора **, получаем {x ** y}") #способ без округленияне - т.к. не всегда корректный ответ при округлении (пример: x = 39.9, y = -6)
    print(f"Легкий способ решения - возведем X в степень Y с помошью оператора **, получаем {(x ** y):.3f}")

    # Сложный способ
    result = 1
    counter = 1
    while counter <= -y:
        result = (result * x)
        counter += 1
    # print(f"Сложный способ решения - возведем X в степень Y с помошью цикла while, получаем {1 / result}") #способ без округленияне - т.к. не всегда корректный ответ при округлении (пример: x = 39.9, y = -6)
    print(f"Сложный способ решения - возведем X в степень Y с помошью цикла while, получаем {(1 / result):.3f}")


while True:
    try:
        a = float(input("Введите действительное положительное число x = "))
        if a <= 0:
            print("Введенное значение x должно быть положительным")
        else:
            break
    except ValueError:
        print("Введенное значение x не соответствует требованиям")
while True:
    try:
        b = int(input("Введите целое отрицательное число y = "))
        if b >= 0:
            print("Введенное значение y должно быть целым и отрицательным")
        else:
            break
    except ValueError:
        print("Введенное значение y не соответствует требованиям")

my_func(a, b)

# найден еще более точный способ округления, но не доработанный (тоже не работает на примере: x = 39.9, y = -6), и его нельзя использовать в функции
# from decimal import *
# print(f"Легкий способ решения - возведем X в степень Y с помошью оператора **, получаем {Decimal(4.4 ** -3).quantize(Decimal('1.0000'))}")